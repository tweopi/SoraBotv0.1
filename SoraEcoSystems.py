import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, ReplyKeyboardRemove
import sqlite3
import asyncio
import os
from pathlib import Path
import pandas as pd
from datetime import datetime
from io import BytesIO
from openpyxl import Workbook
from aiogram.types import BufferedInputFile
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="8143304952:AAHm-ha-Cb2vqOHeOyWGO1B4sdS6wbzBiBQ")
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_data = {}

## ===== –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• =====
BASE_DIR = Path(__file__).parent
DB_DIR = BASE_DIR / "database"
EXPORT_DIR = BASE_DIR / "exports"
REPORTS_DIR = BASE_DIR / "reports"

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
DB_DIR.mkdir(exist_ok=True)
EXPORT_DIR.mkdir(exist_ok=True)
REPORTS_DIR.mkdir(exist_ok=True)

DB_PATH = DB_DIR / "SoraClub.db"  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ø–µ—Ä—å –≤ –ø–∞–ø–∫–µ /database

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
cursor.execute('''
               CREATE TABLE IF NOT EXISTS products
               (
                   id
                   INTEGER
                   PRIMARY
                   KEY
                   AUTOINCREMENT,
                   name
                   TEXT
                   NOT
                   NULL,
                   quantity
                   INTEGER
                   DEFAULT
                   1,
                   category
                   TEXT,
                   added_date
                   TIMESTAMP
                   DEFAULT
                   CURRENT_TIMESTAMP
               )
               ''')

cursor.execute('''
               CREATE TABLE IF NOT EXISTS users
               (
                   user_id
                   INTEGER
                   PRIMARY
                   KEY,
                   username
                   TEXT,
                   first_name
                   TEXT,
                   is_admin
                   BOOLEAN
                   DEFAULT
                   0,
                   is_banned
                   BOOLEAN
                   DEFAULT
                   0,
                   added_date
                   TIMESTAMP
                   DEFAULT
                   CURRENT_TIMESTAMP
               )
               ''')

cursor.execute('''
               CREATE TABLE IF NOT EXISTS action_logs
               (
                   id
                   INTEGER
                   PRIMARY
                   KEY
                   AUTOINCREMENT,
                   user_id
                   INTEGER,
                   action
                   TEXT,
                   details
                   TEXT,
                   timestamp
                   TIMESTAMP
                   DEFAULT
                   CURRENT_TIMESTAMP
               )
               ''')

cursor.execute('''
               CREATE TABLE IF NOT EXISTS shift_reports
               (
                   id
                   INTEGER
                   PRIMARY
                   KEY
                   AUTOINCREMENT,
                   user_id
                   INTEGER
                   NOT
                   NULL,
                   report_date
                   DATE
                   NOT
                   NULL,
                   total
                   REAL
                   NOT
                   NULL,
                   cash
                   REAL
                   NOT
                   NULL,
                   card
                   REAL
                   NOT
                   NULL,
                   bar
                   REAL
                   NOT
                   NULL,
                   hookah
                   REAL
                   NOT
                   NULL,
                   expenses
                   REAL
                   NOT
                   NULL,
                   balance
                   REAL
                   NOT
                   NULL,
                   timestamp
                   TIMESTAMP
                   DEFAULT
                   CURRENT_TIMESTAMP
               )
               ''')

conn.commit()

# ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
MAIN_ADMIN_ID = 7873867301


# ===== –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====
def is_registered(user_id):
    try:
        cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
        return cursor.fetchone() is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, username, first_name):
    try:
        cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
        if not cursor.fetchone():
            is_admin = 1 if user_id == MAIN_ADMIN_ID else 0
            cursor.execute(
                "INSERT INTO users (user_id, username, first_name, is_admin) VALUES (?, ?, ?, ?)",
                (user_id, username, first_name, is_admin)
            )
            conn.commit()
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user_id}, –ò–º—è={first_name}, –ê–¥–º–∏–Ω={is_admin}")
            return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    try:
        cursor.execute("SELECT is_admin FROM users WHERE user_id = ? AND is_banned = 0", (user_id,))
        result = cursor.fetchone()
        return result and result[0] == 1
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è {user_id}: {e}")
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_banned(user_id):
    try:
        cursor.execute("SELECT is_banned FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        return result and result[0] == 1
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞ –¥–ª—è {user_id}: {e}")
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
async def log_action(user_id, action, details=""):
    try:
        cursor.execute(
            "INSERT INTO action_logs (user_id, action, details) VALUES (?, ?, ?)",
            (user_id, action, details)
        )
        conn.commit()
        logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {action} - {details}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if user_id != MAIN_ADMIN_ID:
            cursor.execute("SELECT username, first_name FROM users WHERE user_id = ?", (user_id,))
            user_info = cursor.fetchone()
            username = user_info[0] if user_info and user_info[0] else "–±–µ–∑ username"
            first_name = user_info[1] if user_info and user_info[1] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            notification = (
                f"üîî –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"üë§ {first_name} (@{username})\n"
                f"üÜî ID: {user_id}\n"
                f"‚ö° –î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
                f"üìù –î–µ—Ç–∞–ª–∏: {details}\n"
                f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )

            try:
                await bot.send_message(MAIN_ADMIN_ID, notification)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {e}")


# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def get_main_keyboard(user_id):
    keyboard = [
        [KeyboardButton(text="üìä –°–∫–ª–∞–¥")],
        [KeyboardButton(text="üìù –û—Ç—á—ë—Ç –ø–æ —Å–º–µ–Ω–µ")],
        [KeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")]
    ]

    if is_admin(user_id):
        keyboard.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])

    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_warehouse_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")],
            [KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–ª–∞–¥"), KeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞")],
            [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
            [KeyboardButton(text="üö® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


def get_admin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


def get_user_management_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üëÄ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
            [KeyboardButton(text="‚ö° –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞"), KeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="‚ùå –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
        ],
        resize_keyboard=True
    )


def get_report_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç")],
            [KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç")],
            [KeyboardButton(text="üìÖ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á—ë—Ç–æ–≤")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


# ===== –ö–õ–ê–í–ò–ê–¢–£–†–ê –û–¢–ú–ï–ù–´ =====
def get_cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )


# ===== –û–ë–ù–û–í–õ–ï–ù–ù–´–ô MIDDLEWARE –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê =====
def access_required(func):
    async def wrapper(message: types.Message):
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if not is_registered(user_id):
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            return

        if is_banned(user_id):
            await message.answer("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
        return await func(message)

    return wrapper


def admin_required(func):
    async def wrapper(message: types.Message):
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if not is_registered(user_id):
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        if is_banned(user_id):
            await message.answer("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
        if not is_admin(user_id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            return
        return await func(message)

    return wrapper


# ===== –ö–û–ú–ê–ù–î–ê /start =====
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id == MAIN_ADMIN_ID and not is_registered(user_id):
        cursor.execute(
            "INSERT INTO users (user_id, username, first_name, is_admin) VALUES (?, ?, ?, ?)",
            (user_id, username, first_name, 1)
        )
        conn.commit()
        logger.info(f"–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not is_registered(user_id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        )
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if is_banned(user_id):
        await message.answer("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    is_new_user = register_user(user_id, username, first_name)

    user_states[user_id] = None
    user_data[user_id] = {}

    welcome_text = "üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫–ª–∞–¥—Å–∫–æ–π –±–æ—Ç!\n"
    if is_new_user:
        welcome_text += "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
        await log_action(user_id, "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")

    welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"

    await message.answer(welcome_text, reply_markup=get_main_keyboard(user_id))


# ===== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ =====
@dp.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
@admin_required
async def admin_panel(message: types.Message):
    await message.answer(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )


@dp.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
@admin_required
async def user_management(message: types.Message):
    await message.answer(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_user_management_keyboard()
    )


@dp.message(F.text == "üëÄ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
@admin_required
async def list_users(message: types.Message):
    try:
        cursor.execute(
            "SELECT user_id, username, first_name, is_admin, is_banned, added_date FROM users ORDER BY added_date DESC")
        users = cursor.fetchall()

        if not users:
            await message.answer("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            status = ""
            if user[3]:  # is_admin
                status += "üëë"
            if user[4]:  # is_banned
                status += "üö´"
            if not status:
                status = "üë§"

            response += (
                f"{status} {user[2] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
                f"@{user[1] or '–±–µ–∑ username'}\n"
                f"ID: {user[0]}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[5]}\n\n"
            )

        if len(response) > 4000:
            for i in range(0, len(response), 4000):
                await message.answer(response[i:i + 4000])
        else:
            await message.answer(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@admin_required
async def admin_stats(message: types.Message):
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM users WHERE is_admin = 1")
        admin_count = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM users WHERE is_banned = 1")
        banned_count = cursor.fetchone()[0]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute("SELECT COUNT(*) FROM products")
        total_products = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM products WHERE quantity < 10")
        low_stock = cursor.fetchone()[0]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
        cursor.execute("SELECT COUNT(*) FROM shift_reports")
        total_reports = cursor.fetchone()[0]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        cursor.execute("SELECT COUNT(*) FROM action_logs WHERE timestamp > datetime('now', '-1 day')")
        actions_24h = cursor.fetchone()[0]

        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            f"‚îú –í—Å–µ–≥–æ: {total_users}\n"
            f"‚îú –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {admin_count}\n"
            f"‚îî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {banned_count}\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä—ã:\n"
            f"‚îú –í—Å–µ–≥–æ: {total_products}\n"
            f"‚îî –° –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º: {low_stock}\n\n"
            f"üìù –û—Ç—á–µ—Ç—ã:\n"
            f"‚îî –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {total_reports}\n\n"
            f"‚ö° –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
            f"‚îî –î–µ–π—Å—Ç–≤–∏–π –∑–∞ 24—á: {actions_24h}"
        )

        await message.answer(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@dp.message(F.text == "üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π")
@admin_required
async def view_logs(message: types.Message):
    try:
        cursor.execute("""
                       SELECT al.action, al.details, al.timestamp, u.first_name, u.username
                       FROM action_logs al
                                LEFT JOIN users u ON al.user_id = u.user_id
                       ORDER BY al.timestamp DESC LIMIT 20
                       """)
        logs = cursor.fetchall()

        if not logs:
            await message.answer("üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç—ã.")
            return

        response = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –¥–µ–π—Å—Ç–≤–∏–π:\n\n"
        for log in logs:
            username = f"@{log[4]}" if log[4] else "–±–µ–∑ username"
            first_name = log[3] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            response += (
                f"‚ö° {log[0]}\n"
                f"üë§ {first_name} ({username})\n"
                f"üìù {log[1]}\n"
                f"üïê {log[2]}\n\n"
            )

        if len(response) > 4000:
            for i in range(0, len(response), 4000):
                await message.answer(response[i:i + 4000])
        else:
            await message.answer(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@dp.message(F.text == "‚ö° –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞")
@admin_required
async def promote_user_start(message: types.Message):
    user_states[message.from_user.id] = "promoting_user"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:", reply_markup=get_cancel_keyboard())


@dp.message(F.text == "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
@admin_required
async def ban_user_start(message: types.Message):
    user_states[message.from_user.id] = "banning_user"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=get_cancel_keyboard())


@dp.message(F.text == "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
@admin_required
async def unban_user_start(message: types.Message):
    user_states[message.from_user.id] = "unbanning_user"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=get_cancel_keyboard())


@dp.message(F.text == "‚ùå –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞")
@admin_required
async def demote_user_start(message: types.Message):
    user_states[message.from_user.id] = "demoting_user"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_cancel_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "promoting_user")
async def promote_user_execute(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_states[message.from_user.id] = None
        await message.answer("‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_user_management_keyboard())
        return

    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).", reply_markup=get_cancel_keyboard())
        return

    target_user_id = int(message.text)
    admin_id = message.from_user.id

    try:
        cursor.execute("SELECT first_name, username FROM users WHERE user_id = ?", (target_user_id,))
        user = cursor.fetchone()

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_cancel_keyboard())
        else:
            cursor.execute("UPDATE users SET is_admin = 1 WHERE user_id = ?", (target_user_id,))
            conn.commit()

            username = f"@{user[1]}" if user[1] else "–±–µ–∑ username"
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[0]} ({username}) –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                                 reply_markup=get_user_management_keyboard())
            await log_action(admin_id, "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(target_user_id, "üéâ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            except:
                pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_cancel_keyboard())
    finally:
        user_states[message.from_user.id] = None


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "banning_user")
async def ban_user_execute(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_states[message.from_user.id] = None
        await message.answer("‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_user_management_keyboard())
        return

    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).", reply_markup=get_cancel_keyboard())
        return

    target_user_id = int(message.text)
    admin_id = message.from_user.id

    if target_user_id == MAIN_ADMIN_ID:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_cancel_keyboard())
        user_states[message.from_user.id] = None
        return

    try:
        cursor.execute("SELECT first_name, username FROM users WHERE user_id = ?", (target_user_id,))
        user = cursor.fetchone()

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_cancel_keyboard())
        else:
            cursor.execute("UPDATE users SET is_banned = 1 WHERE user_id = ?", (target_user_id,))
            conn.commit()

            username = f"@{user[1]}" if user[1] else "–±–µ–∑ username"
            await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[0]} ({username}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                                 reply_markup=get_user_management_keyboard())
            await log_action(admin_id, "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(target_user_id, "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except:
                pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=get_cancel_keyboard())
    finally:
        user_states[message.from_user.id] = None


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "unbanning_user")
async def unban_user_execute(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_states[message.from_user.id] = None
        await message.answer("‚ùå –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_user_management_keyboard())
        return

    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).", reply_markup=get_cancel_keyboard())
        return

    target_user_id = int(message.text)
    admin_id = message.from_user.id

    try:
        cursor.execute("SELECT first_name, username FROM users WHERE user_id = ?", (target_user_id,))
        user = cursor.fetchone()

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_cancel_keyboard())
        else:
            cursor.execute("UPDATE users SET is_banned = 0 WHERE user_id = ?", (target_user_id,))
            conn.commit()

            username = f"@{user[1]}" if user[1] else "–±–µ–∑ username"
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[0]} ({username}) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                                 reply_markup=get_user_management_keyboard())
            await log_action(admin_id, "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(target_user_id, "‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            except:
                pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=get_cancel_keyboard())
    finally:
        user_states[message.from_user.id] = None


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "demoting_user")
async def demote_user_execute(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_states[message.from_user.id] = None
        await message.answer("‚ùå –°–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_user_management_keyboard())
        return

    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).", reply_markup=get_cancel_keyboard())
        return

    target_user_id = int(message.text)
    admin_id = message.from_user.id

    if target_user_id == MAIN_ADMIN_ID:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_cancel_keyboard())
        user_states[message.from_user.id] = None
        return

    try:
        cursor.execute("SELECT first_name, username FROM users WHERE user_id = ?", (target_user_id,))
        user = cursor.fetchone()

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_cancel_keyboard())
        else:
            cursor.execute("UPDATE users SET is_admin = 0 WHERE user_id = ?", (target_user_id,))
            conn.commit()

            username = f"@{user[1]}" if user[1] else "–±–µ–∑ username"
            await message.answer(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[0]} ({username}) —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                                 reply_markup=get_user_management_keyboard())
            await log_action(admin_id, "–°–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                             f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {target_user_id} —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(target_user_id, "‚ùå –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã.")
            except:
                pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_cancel_keyboard())
    finally:
        user_states[message.from_user.id] = None


# –ù–∞–≤–∏–≥–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
@admin_required
async def back_to_admin_panel(message: types.Message):
    await message.answer("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())


@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu_from_admin(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard(message.from_user.id))


# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞ =====
@dp.message(F.text == "üìä –°–∫–ª–∞–¥")
@access_required
async def warehouse_menu(message: types.Message):
    await message.answer(
        "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_warehouse_keyboard()
    )


# ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê =====
@dp.message(F.text == "üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
@access_required
async def add_product_start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = "adding_name"
    user_data[user_id] = {}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_cancel_keyboard())


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "adding_name")
async def add_product_name(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_states[message.from_user.id] = None
        user_data[message.from_user.id] = {}
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_warehouse_keyboard())
        return

    user_id = message.from_user.id
    user_data[user_id]["name"] = message.text
    user_states[user_id] = "adding_quantity"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_cancel_keyboard())


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "adding_quantity")
async def add_product_quantity(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_states[message.from_user.id] = None
        user_data[message.from_user.id] = {}
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_warehouse_keyboard())
        return

    user_id = message.from_user.id
    if not message.text.isdigit():
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.", reply_markup=get_cancel_keyboard())
        return

    user_data[user_id]["quantity"] = int(message.text)
    user_states[user_id] = "adding_category"
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
    )


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "adding_category")
async def add_product_final(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_states[message.from_user.id] = None
        user_data[message.from_user.id] = {}
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_warehouse_keyboard())
        return

    user_id = message.from_user.id
    category = None if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text

    try:
        cursor.execute(
            "INSERT INTO products (name, quantity, category) VALUES (?, ?, ?)",
            (user_data[user_id]["name"], user_data[user_id]["quantity"], category)
        )
        conn.commit()

        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {user_data[user_id]['name']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user_data[user_id]['quantity']}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category if category else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}",
            reply_markup=get_warehouse_keyboard()
        )

        await log_action(user_id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                         f"{user_data[user_id]['name']} (–∫–æ–ª-–≤–æ: {user_data[user_id]['quantity']})")

        if user_data[user_id]["quantity"] < 10:
            await message.answer(
                f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –¢–æ–≤–∞—Ä '{user_data[user_id]['name']}' –¥–æ–±–∞–≤–ª–µ–Ω —Å –Ω–∏–∑–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º: {user_data[user_id]['quantity']} —à—Ç.",
                reply_markup=get_warehouse_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!", reply_markup=get_warehouse_keyboard())
    finally:
        user_states[user_id] = None
        user_data[user_id] = {}


# ===== –ü–û–ò–°–ö –¢–û–í–ê–†–ê =====
@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞")
@access_required
async def search_product_start(message: types.Message):
    user_states[message.from_user.id] = "searching"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=get_cancel_keyboard())


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "searching")
async def search_product_execute(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_states[message.from_user.id] = None
        await message.answer("‚ùå –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=get_warehouse_keyboard())
        return

    user_id = message.from_user.id
    search_term = message.text.strip()

    try:
        cursor.execute("SELECT * FROM products")
        all_products = cursor.fetchall()

        if not all_products:
            await message.answer("üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç!", reply_markup=get_warehouse_keyboard())
            user_states[user_id] = None
            return

        found_products = []
        for product in all_products:
            name_match = search_term.lower() in product[1].lower() if product[1] else False
            category_match = search_term.lower() in product[3].lower() if product[3] else False

            if name_match or category_match:
                found_products.append(product)

        if not found_products:
            await message.answer(f"üîé –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                                 reply_markup=get_warehouse_keyboard())
            user_states[user_id] = None
            return

        response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ('{search_term}'):\n\n"
        for product in found_products:
            response += (f"{'‚ö†Ô∏è' if product[2] < 10 else 'üîπ'} ID: {product[0]}\n"
                         f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n"
                         f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[2]}\n"
                         f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[3] if product[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n")

        if len(response) > 4000:
            for x in range(0, len(response), 4000):
                await message.answer(response[x:x + 4000])
        else:
            await message.answer(response, reply_markup=get_warehouse_keyboard())

        await log_action(user_id, "–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", f"–ó–∞–ø—Ä–æ—Å: '{search_term}', –Ω–∞–π–¥–µ–Ω–æ: {len(found_products)}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞!", reply_markup=get_warehouse_keyboard())
    finally:
        user_states[user_id] = None


# ===== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–í–ê–†–ê =====
@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
@access_required
async def edit_product_start(message: types.Message):
    cursor.execute("SELECT id, name, quantity FROM products")
    products = cursor.fetchall()

    if not products:
        await message.answer("üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.", reply_markup=get_warehouse_keyboard())
        return

    keyboard = []
    for product in products:
        keyboard.append([KeyboardButton(text=f"‚úèÔ∏è {product[1]} (ID: {product[0]}, –ö–æ–ª-–≤–æ: {product[2]})")])

    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    )


@dp.message(F.text.startswith("‚úèÔ∏è "))
async def edit_product_selected(message: types.Message):
    try:
        product_id = int(message.text.split("(ID: ")[1].split(",")[0])
        cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
        product = cursor.fetchone()

        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_warehouse_keyboard())
            return

        user_data[message.from_user.id] = {
            "edit_id": product_id,
            "current_name": product[1],
            "current_quantity": product[2],
            "current_category": product[3]
        }

        await message.answer(
            f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä:\n"
            f"ID: {product[0]}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[2]}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[3] if product[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üñä –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")],
                    [KeyboardButton(text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")],
                    [KeyboardButton(text="üè∑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")],
                    [KeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤")]  # –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                ],
                resize_keyboard=True
            )
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞!", reply_markup=get_warehouse_keyboard())


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "üîô –ö –°–ü–ò–°–ö–£ –¢–û–í–ê–†–û–í" =====
@dp.message(F.text == "üîô –ö —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤")
async def back_to_products_list(message: types.Message):
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await edit_product_start(message)


@dp.message(F.text == "üñä –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")
async def edit_name_handler(message: types.Message):
    user_states[message.from_user.id] = "editing_name"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=get_cancel_keyboard())


@dp.message(F.text == "üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
async def edit_quantity_handler(message: types.Message):
    user_states[message.from_user.id] = "editing_quantity"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=get_cancel_keyboard())


@dp.message(F.text == "üè∑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def edit_category_handler(message: types.Message):
    user_states[message.from_user.id] = "editing_category"
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ '—É–¥–∞–ª–∏—Ç—å' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_cancel_keyboard()
    )


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "editing_name")
async def save_new_name(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_states[message.from_user.id] = None
        await message.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_warehouse_keyboard())
        return

    product_id = user_data[message.from_user.id]["edit_id"]
    cursor.execute("UPDATE products SET name = ? WHERE id = ?", (message.text, product_id))
    conn.commit()
    await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {message.text}", reply_markup=get_warehouse_keyboard())
    user_states[message.from_user.id] = None


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "editing_quantity")
async def save_new_quantity(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_states[message.from_user.id] = None
        await message.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_warehouse_keyboard())
        return

    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=get_cancel_keyboard())
        return

    product_id = user_data[message.from_user.id]["edit_id"]
    new_quantity = int(message.text)
    cursor.execute("UPDATE products SET quantity = ? WHERE id = ?", (new_quantity, product_id))
    conn.commit()

    response = f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_quantity}"
    if new_quantity < 10:
        product_name = user_data[message.from_user.id]["current_name"]
        response += f"\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –¢–æ–≤–∞—Ä '{product_name}' —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –Ω–∏–∑–∫–∏–π –∑–∞–ø–∞—Å: {new_quantity} —à—Ç."

    await message.answer(response, reply_markup=get_warehouse_keyboard())
    user_states[message.from_user.id] = None


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "editing_category")
async def save_new_category(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_states[message.from_user.id] = None
        await message.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_warehouse_keyboard())
        return

    product_id = user_data[message.from_user.id]["edit_id"]
    new_category = None if message.text.lower() == "—É–¥–∞–ª–∏—Ç—å" else message.text
    cursor.execute("UPDATE products SET category = ? WHERE id = ?", (new_category, product_id))
    conn.commit()
    action = "—É–¥–∞–ª–µ–Ω–∞" if new_category is None else "–∏–∑–º–µ–Ω–µ–Ω–∞"
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {action}", reply_markup=get_warehouse_keyboard())
    user_states[message.from_user.id] = None


# ===== –£–î–ê–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê =====
@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
@access_required
async def delete_product_start(message: types.Message):
    cursor.execute("SELECT id, name FROM products")
    products = cursor.fetchall()

    if not products:
        await message.answer("üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.", reply_markup=get_warehouse_keyboard())
        return

    keyboard = []
    for product in products:
        keyboard.append([KeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {product[1]} (ID: {product[0]})")])

    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    )


@dp.message(F.text.startswith("‚ùå –£–¥–∞–ª–∏—Ç—å "))
async def delete_product_selected(message: types.Message):
    try:
        product_id = int(message.text.split("(ID: ")[1].rstrip(")"))
        cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
        product = cursor.fetchone()

        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_warehouse_keyboard())
            return

        cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
        conn.commit()

        await message.answer(
            f"üóë –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n"
            f"ID: {product[0]}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[2]}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[3] if product[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}",
            reply_markup=get_warehouse_keyboard()
        )

        await log_action(message.from_user.id, "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                         f"{product[1]} (ID: {product[0]}, –∫–æ–ª-–≤–æ: {product[2]})")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!", reply_markup=get_warehouse_keyboard())


# ===== –í–´–í–û–î –°–ü–ò–°–ö–ê –¢–û–í–ê–†–û–í =====
@dp.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–ª–∞–¥")
@access_required
async def show_warehouse(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = None

    try:
        cursor.execute("SELECT * FROM products ORDER BY quantity ASC")
        products = cursor.fetchall()

        if not products:
            await message.answer("üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç!", reply_markup=get_warehouse_keyboard())
            return

        cursor.execute("SELECT * FROM products WHERE quantity < 10 ORDER BY quantity ASC")
        low_stock = cursor.fetchall()

        response = "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        for product in products:
            response += (
                f"{'‚ö†Ô∏è' if product[2] < 10 else 'üîπ'} ID: {product[0]}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[2]}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[3] if product[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω: {product[4]}\n\n"
            )

        if low_stock:
            warning = "üö® –í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
            for product in low_stock:
                warning += (
                    f"‚ñ™Ô∏è {product[1]} (ID: {product[0]}) - –æ—Å—Ç–∞–ª–æ—Å—å {product[2]} —à—Ç.\n"
                )
            response = warning + "\n" + response

        max_length = 4000
        for i in range(0, len(response), max_length):
            await message.answer(response[i:i + max_length])

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–∫–ª–∞–¥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞!", reply_markup=get_warehouse_keyboard())


# ===== –ü–†–û–í–ï–†–ö–ê –ó–ê–ö–ê–ù–ß–ò–í–ê–Æ–©–ò–•–°–Ø –¢–û–í–ê–†–û–í =====
@dp.message(F.text == "üö® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏")
@access_required
async def check_low_stock(message: types.Message):
    try:
        cursor.execute("SELECT * FROM products WHERE quantity < 10 ORDER BY quantity ASC")
        low_stock = cursor.fetchall()

        if not low_stock:
            await message.answer("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ (10+ —à—Ç.)",
                                 reply_markup=get_warehouse_keyboard())
            return

        response = "üö® –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º (<10 —à—Ç.):\n\n"
        for product in low_stock:
            response += (
                f"‚ñ™Ô∏è ID: {product[0]}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {product[2]} —à—Ç.\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[3] if product[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            )

        await message.answer(response, reply_markup=get_warehouse_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤!", reply_markup=get_warehouse_keyboard())


# ===== –≠–ö–°–ü–û–†–¢ –í EXCEL =====
@dp.message(F.text == "üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
@access_required
async def export_to_excel(message: types.Message):
    try:
        cursor.execute("SELECT id, name, quantity, category, added_date FROM products")
        columns = [column[0] for column in cursor.description]
        data = cursor.fetchall()

        if not data:
            await message.answer("üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç! –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                                 reply_markup=get_main_keyboard(message.from_user.id))
            return

        output = BytesIO()
        workbook = Workbook()
        sheet = workbook.active
        sheet.title = "–°–∫–ª–∞–¥"
        sheet.append(columns)

        for row in data:
            sheet.append(row)
            if row[2] < 10:
                pass

        workbook.save(output)
        output.seek(0)

        file_data = output.getvalue()
        filename = f"—Å–∫–ª–∞–¥_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.xlsx"

        excel_file = BufferedInputFile(
            file=file_data,
            filename=filename
        )

        await message.answer_document(
            document=excel_file,
            caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞ –≤ Excel",
            reply_markup=get_main_keyboard(message.from_user.id)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö!\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
    finally:
        if 'output' in locals():
            output.close()


# ===== –û–¢–ß–ï–¢ –ü–û –°–ú–ï–ù–ï =====
@dp.message(F.text == "üìù –û—Ç—á—ë—Ç –ø–æ —Å–º–µ–Ω–µ")
@access_required
async def shift_report_menu(message: types.Message):
    await message.answer(
        "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞–º–∏ –ø–æ —Å–º–µ–Ω–µ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_report_keyboard()
    )


@dp.message(F.text == "üìã –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç")
@access_required
async def create_report_start(message: types.Message):
    user_id = message.from_user.id
    today = datetime.now().strftime('%Y-%m-%d')

    cursor.execute("SELECT id FROM shift_reports WHERE user_id = ? AND report_date = ?", (user_id, today))
    if cursor.fetchone():
        await message.answer("‚ö†Ô∏è –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç'.")
        return

    user_states[user_id] = "report_date"
    user_data[user_id] = {
        'report': {
            'report_date': today,
            'fields': ['total', 'cash', 'card', 'bar', 'hookah', 'expenses', 'balance'],
            'current_field': 0,
            'labels': [
                "–æ–±—â—É—é —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏",
                "—Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö",
                "—Å—É–º–º—É –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã—Ö",
                "–≤—ã—Ä—É—á–∫—É –ø–æ –±–∞—Ä—É",
                "–≤—ã—Ä—É—á–∫—É –ø–æ –∫–∞–ª—å—è–Ω–∞–º",
                "—Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤",
                "–æ—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ"
            ]
        }
    }

    await message.answer(
        f"üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –∑–∞ {today}\n"
        f"–í–≤–µ–¥–∏—Ç–µ {user_data[user_id]['report']['labels'][0]}:",
        reply_markup=get_cancel_keyboard()
    )


@dp.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç")
@access_required
async def update_report_start(message: types.Message):
    user_id = message.from_user.id
    today = datetime.now().strftime('%Y-%m-%d')

    cursor.execute(
        "SELECT total, cash, card, bar, hookah, expenses, balance "
        "FROM shift_reports WHERE user_id = ? AND report_date = ?",
        (user_id, today)
    )
    report = cursor.fetchone()

    if not report:
        await message.answer("‚ÑπÔ∏è –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç'.")
        return

    user_states[user_id] = "update_report"
    user_data[user_id] = {
        'report': {
            'report_date': today,
            'fields': ['total', 'cash', 'card', 'bar', 'hookah', 'expenses', 'balance'],
            'current_field': 0,
            'values': list(report),
            'labels': [
                "–æ–±—â—É—é —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏",
                "—Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö",
                "—Å—É–º–º—É –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã—Ö",
                "–≤—ã—Ä—É—á–∫—É –ø–æ –±–∞—Ä—É",
                "–≤—ã—Ä—É—á–∫—É –ø–æ –∫–∞–ª—å—è–Ω–∞–º",
                "—Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤",
                "–æ—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ"
            ]
        }
    }

    await message.answer(
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –∑–∞ {today}\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {user_data[user_id]['report']['labels'][0]}: "
        f"{user_data[user_id]['report']['values'][0]}\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
        reply_markup=get_cancel_keyboard()
    )


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) in ["report_date", "update_report"])
async def process_report_data(message: types.Message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_id = message.from_user.id
        user_states[user_id] = None
        if 'report' in user_data[user_id]:
            del user_data[user_id]['report']
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_report_keyboard())
        return

    user_id = message.from_user.id
    state = user_states[user_id]
    report_data = user_data[user_id]['report']
    current_field = report_data['current_field']

    try:
        value = float(message.text.replace(',', '.'))
        if value < 0:
            raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=get_cancel_keyboard())
        return

    if state == "report_date":
        report_data[report_data['fields'][current_field]] = value
    else:
        report_data['values'][current_field] = value

    report_data['current_field'] += 1

    if report_data['current_field'] < len(report_data['fields']):
        current_index = report_data['current_field']
        field_label = report_data['labels'][current_index]
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ {field_label}:", reply_markup=get_cancel_keyboard())
        return

    try:
        if state == "report_date":
            cursor.execute(
                "INSERT INTO shift_reports "
                "(user_id, report_date, total, cash, card, bar, hookah, expenses, balance) "
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
                (user_id, report_data['report_date'],
                 report_data['total'], report_data['cash'], report_data['card'],
                 report_data['bar'], report_data['hookah'], report_data['expenses'],
                 report_data['balance'])
            )
            action = "—Å–æ–∑–¥–∞–Ω"
        else:
            cursor.execute(
                "UPDATE shift_reports SET "
                "total = ?, cash = ?, card = ?, bar = ?, "
                "hookah = ?, expenses = ?, balance = ? "
                "WHERE user_id = ? AND report_date = ?",
                (report_data['values'][0], report_data['values'][1],
                 report_data['values'][2], report_data['values'][3],
                 report_data['values'][4], report_data['values'][5],
                 report_data['values'][6], user_id, report_data['report_date'])
            )
            action = "–æ–±–Ω–æ–≤–ª–µ–Ω"

        conn.commit()

        if state == "report_date":
            report_values = [
                report_data['total'], report_data['cash'], report_data['card'],
                report_data['bar'], report_data['hookah'], report_data['expenses'],
                report_data['balance']
            ]
        else:
            report_values = report_data['values']

        report_text = (
            f"üìù –û—Ç—á—ë—Ç –ø–æ —Å–º–µ–Ω–µ {report_data['report_date']} {action}:\n\n"
            f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {report_values[0]} ‚ÇΩ\n"
            f"‚Ä¢ –ù–∞–ª–∏—á–Ω—ã–µ: {report_values[1]} ‚ÇΩ\n"
            f"‚Ä¢ –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ: {report_values[2]} ‚ÇΩ\n"
            f"‚Ä¢ –ë–∞—Ä: {report_values[3]} ‚ÇΩ\n"
            f"‚Ä¢ –ö–∞–ª—å—è–Ω: {report_values[4]} ‚ÇΩ\n"
            f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {report_values[5]} ‚ÇΩ\n"
            f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: {report_values[6]} ‚ÇΩ\n\n"
            f"üí∏ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {report_values[0] - report_values[5]} ‚ÇΩ"
        )

        await message.answer(report_text, reply_markup=get_report_keyboard())
        await log_action(user_id, f"–û—Ç—á—ë—Ç {action}", f"–î–∞—Ç–∞: {report_data['report_date']}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞!", reply_markup=get_report_keyboard())

    finally:
        user_states[user_id] = None
        if 'report' in user_data[user_id]:
            del user_data[user_id]['report']


@dp.message(F.text == "üìÖ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á—ë—Ç–æ–≤")
@access_required
async def report_history(message: types.Message):
    user_id = message.from_user.id

    try:
        cursor.execute(
            "SELECT report_date, total, cash, card, bar, hookah, expenses, balance "
            "FROM shift_reports WHERE user_id = ? ORDER BY report_date DESC LIMIT 10",
            (user_id,)
        )
        reports = cursor.fetchall()

        if not reports:
            await message.answer("üì≠ –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤.")
            return

        response = "üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç—á—ë—Ç–æ–≤:\n\n"
        for report in reports:
            response += (
                f"üìÖ {report[0]}\n"
                f"‚îú –û–±—â–∞—è —Å—É–º–º–∞: {report[1]} ‚ÇΩ\n"
                f"‚îú –ù–∞–ª–∏—á–Ω—ã–µ: {report[2]} ‚ÇΩ\n"
                f"‚îú –ë–µ–∑–Ω–∞–ª: {report[3]} ‚ÇΩ\n"
                f"‚îú –ë–∞—Ä: {report[4]} ‚ÇΩ\n"
                f"‚îú –ö–∞–ª—å—è–Ω: {report[5]} ‚ÇΩ\n"
                f"‚îú –†–∞—Å—Ö–æ–¥—ã: {report[6]} ‚ÇΩ\n"
                f"‚îî –û—Å—Ç–∞—Ç–æ–∫: {report[7]} ‚ÇΩ\n\n"
            )

        await message.answer(response, reply_markup=get_report_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—á—ë—Ç–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—á—ë—Ç–æ–≤!", reply_markup=get_report_keyboard())


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ú–ï–ù–´ =====
@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@access_required
async def cancel_action(message: types.Message):
    user_id = message.from_user.id
    state = user_states.get(user_id)

    if state:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if state.startswith(("adding_", "searching", "editing_")):
            # –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å–∫–ª–∞–¥–æ–º
            user_states[user_id] = None
            if user_id in user_data:
                user_data[user_id] = {}
            await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_warehouse_keyboard())
        elif state in ["report_date", "update_report"]:
            # –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ—Ç—á–µ—Ç–∞–º–∏
            user_states[user_id] = None
            if user_id in user_data and 'report' in user_data[user_id]:
                del user_data[user_id]['report']
            await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_report_keyboard())
        elif state.endswith(("_user")):
            # –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            user_states[user_id] = None
            await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_user_management_keyboard())
    else:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã", reply_markup=get_main_keyboard(user_id))


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–ù–ê–ó–ê–î" =====
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    if user_states.get(user_id) in ["editing_name", "editing_quantity", "editing_category"]:
        user_states[user_id] = None
        await message.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_warehouse_keyboard())
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    if user_data.get(user_id) and "edit_id" in user_data[user_id]:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await edit_product_start(message)
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard(user_id))


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–ù–ê–ó–ê–î –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ" =====
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard(message.from_user.id))


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ì–†–£–ü–ü –ò –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –ö–û–ú–ê–ù–î =====
@dp.message(F.chat.type.in_({"group", "supergroup"}))
async def handle_group_messages(message: types.Message):
    pass


@dp.message(F.chat.type == "private")
@access_required
async def unknown_command(message: types.Message):
    user_id = message.from_user.id
    await message.answer(
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard(user_id)
    )
    await log_action(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", f"–í–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç: {message.text}")


# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
    logger.info("=" * 50)
    logger.info(f"ü§ñ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ SoraEcoSystemBot")
    logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"üîë ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {MAIN_ADMIN_ID}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_registered(MAIN_ADMIN_ID):
        cursor.execute(
            "INSERT INTO users (user_id, username, first_name, is_admin) VALUES (?, ?, ?, ?)",
            (MAIN_ADMIN_ID, "sora_admin", "Sora Admin", 1)
        )
        conn.commit()
        logger.info("‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    try:
        cursor.execute("SELECT COUNT(*) FROM users")
        user_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM products")
        product_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM action_logs")
        log_count = cursor.fetchone()[0]

        logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {user_count}")
        logger.info(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ: {product_count}")
        logger.info(f"üìù –õ–æ–≥-–∑–∞–ø–∏—Å–µ–π –¥–µ–π—Å—Ç–≤–∏–π: {log_count}")
        logger.info("=" * 50)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        logger.info("=" * 50)
        logger.info(f"üõë –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ SoraEcoSystemBot")
        logger.info(f"‚è∞ –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        try:
            cursor.execute("SELECT COUNT(*) FROM action_logs WHERE timestamp > datetime('now', '-1 day')")
            actions_24h = cursor.fetchone()[0]
            logger.info(f"‚ö° –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24 —á–∞—Å–∞: {actions_24h} –¥–µ–π—Å—Ç–≤–∏–π")
        except:
            pass

        logger.info("üì¶ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        conn.close()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
        logger.info("=" * 50)
        logger.info("üëã –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")