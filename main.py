import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, ReplyKeyboardRemove
import sqlite3
import asyncio
import os
from pathlib import Path
import pandas as pd
from datetime import datetime
from io import BytesIO
from openpyxl import Workbook
from aiogram.types import BufferedInputFile
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="8143304952:AAHm-ha-Cb2vqOHeOyWGO1B4sdS6wbzBiBQ")
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_data = {}

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• =====
BASE_DIR = Path(__file__).parent
DB_PATH = BASE_DIR / "SoraClub.db"  # –¢–µ–ø–µ—Ä—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
EXPORT_DIR = BASE_DIR / "exports"  # –ü–∞–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
EXPORT_DIR.mkdir(exist_ok=True)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
cursor.execute('''
               CREATE TABLE IF NOT EXISTS products
               (
                   id
                   INTEGER
                   PRIMARY
                   KEY
                   AUTOINCREMENT,
                   name
                   TEXT
                   NOT
                   NULL,
                   quantity
                   INTEGER
                   DEFAULT
                   1,
                   category
                   TEXT,
                   added_date
                   TIMESTAMP
                   DEFAULT
                   CURRENT_TIMESTAMP
               )
               ''')

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
               CREATE TABLE IF NOT EXISTS users
               (
                   user_id
                   INTEGER
                   PRIMARY
                   KEY,
                   username
                   TEXT,
                   first_name
                   TEXT,
                   is_admin
                   BOOLEAN
                   DEFAULT
                   0,
                   is_banned
                   BOOLEAN
                   DEFAULT
                   0,
                   added_date
                   TIMESTAMP
                   DEFAULT
                   CURRENT_TIMESTAMP
               )
               ''')

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
cursor.execute('''
               CREATE TABLE IF NOT EXISTS action_logs
               (
                   id
                   INTEGER
                   PRIMARY
                   KEY
                   AUTOINCREMENT,
                   user_id
                   INTEGER,
                   action
                   TEXT,
                   details
                   TEXT,
                   timestamp
                   TIMESTAMP
                   DEFAULT
                   CURRENT_TIMESTAMP
               )
               ''')

conn.commit()

# ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID)
# –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID, –Ω–∞–ø–∏—à–∏—Ç–µ @userinfobot –≤ Telegram
MAIN_ADMIN_ID = 7873867301  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, username, first_name):
    try:
        cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
        if not cursor.fetchone():
            is_admin = 1 if user_id == MAIN_ADMIN_ID else 0
            cursor.execute(
                "INSERT INTO users (user_id, username, first_name, is_admin) VALUES (?, ?, ?, ?)",
                (user_id, username, first_name, is_admin)
            )
            conn.commit()
            return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    try:
        cursor.execute("SELECT is_admin FROM users WHERE user_id = ? AND is_banned = 0", (user_id,))
        result = cursor.fetchone()
        return result and result[0] == 1
    except:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_banned(user_id):
    try:
        cursor.execute("SELECT is_banned FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        return result and result[0] == 1
    except:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
async def log_action(user_id, action, details=""):
    try:
        cursor.execute(
            "INSERT INTO action_logs (user_id, action, details) VALUES (?, ?, ?)",
            (user_id, action, details)
        )
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if user_id != MAIN_ADMIN_ID:
            cursor.execute("SELECT username, first_name FROM users WHERE user_id = ?", (user_id,))
            user_info = cursor.fetchone()
            username = user_info[0] if user_info and user_info[0] else "–±–µ–∑ username"
            first_name = user_info[1] if user_info and user_info[1] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            notification = (
                f"üîî –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"üë§ {first_name} (@{username})\n"
                f"üÜî ID: {user_id}\n"
                f"‚ö° –î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
                f"üìù –î–µ—Ç–∞–ª–∏: {details}\n"
                f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )

            try:
                await bot.send_message(MAIN_ADMIN_ID, notification)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {e}")


# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def get_main_keyboard(user_id):
    keyboard = [
        [KeyboardButton(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–ª–∞–¥"), KeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞")],
        [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"), KeyboardButton(text="üö® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏")]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if is_admin(user_id):
        keyboard.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])

    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_admin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_user_management_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üëÄ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
            [KeyboardButton(text="‚ö° –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞"), KeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="‚ùå –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
        ],
        resize_keyboard=True
    )


# ===== –ö–û–ú–ê–ù–î–ê /start =====
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if is_banned(user_id):
        await message.answer("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_new_user = register_user(user_id, username, first_name)

    user_states[user_id] = None
    user_data[user_id] = {}

    welcome_text = "üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫–ª–∞–¥—Å–∫–æ–π –±–æ—Ç!\n"
    if is_new_user:
        welcome_text += "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
        await log_action(user_id, "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")

    welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"

    await message.answer(welcome_text, reply_markup=get_main_keyboard(user_id))


# ===== MIDDLEWARE –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê =====
def access_required(func):
    async def wrapper(message: types.Message):
        user_id = message.from_user.id
        if is_banned(user_id):
            await message.answer("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
        return await func(message)
    return wrapper

def admin_required(func):
    async def wrapper(message: types.Message):
        user_id = message.from_user.id
        if is_banned(user_id):
            await message.answer("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
        if not is_admin(user_id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            return
        return await func(message)
    return wrapper

# ===== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ =====
@dp.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
@admin_required
async def admin_panel(message: types.Message):
    await message.answer(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@dp.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
@admin_required
async def user_management(message: types.Message):
    await message.answer(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_user_management_keyboard()
    )

@dp.message(F.text == "üëÄ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
@admin_required
async def list_users(message: types.Message):
    try:
        cursor.execute("SELECT user_id, username, first_name, is_admin, is_banned, added_date FROM users ORDER BY added_date DESC")
        users = cursor.fetchall()

        if not users:
            await message.answer("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            status = ""
            if user[3]:  # is_admin
                status += "üëë"
            if user[4]:  # is_banned
                status += "üö´"
            if not status:
                status = "üë§"

            response += (
                f"{status} {user[2] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
                f"@{user[1] or '–±–µ–∑ username'}\n"
                f"ID: {user[0]}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[5]}\n\n"
            )

        if len(response) > 4000:
            for i in range(0, len(response), 4000):
                await message.answer(response[i:i+4000])
        else:
            await message.answer(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@admin_required
async def admin_stats(message: types.Message):
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM users WHERE is_admin = 1")
        admin_count = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM users WHERE is_banned = 1")
        banned_count = cursor.fetchone()[0]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute("SELECT COUNT(*) FROM products")
        total_products = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM products WHERE quantity < 10")
        low_stock = cursor.fetchone()[0]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        cursor.execute("SELECT COUNT(*) FROM action_logs WHERE timestamp > datetime('now', '-1 day')")
        actions_24h = cursor.fetchone()[0]

        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            f"‚îú –í—Å–µ–≥–æ: {total_users}\n"
            f"‚îú –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {admin_count}\n"
            f"‚îî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {banned_count}\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä—ã:\n"
            f"‚îú –í—Å–µ–≥–æ: {total_products}\n"
            f"‚îî –° –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º: {low_stock}\n\n"
            f"‚ö° –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
            f"‚îî –î–µ–π—Å—Ç–≤–∏–π –∑–∞ 24—á: {actions_24h}"
        )

        await message.answer(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@dp.message(F.text == "üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π")
@admin_required
async def view_logs(message: types.Message):
    try:
        cursor.execute("""
            SELECT al.action, al.details, al.timestamp, u.first_name, u.username 
            FROM action_logs al 
            LEFT JOIN users u ON al.user_id = u.user_id 
            ORDER BY al.timestamp DESC LIMIT 20
        """)
        logs = cursor.fetchall()

        if not logs:
            await message.answer("üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç—ã.")
            return

        response = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –¥–µ–π—Å—Ç–≤–∏–π:\n\n"
        for log in logs:
            username = f"@{log[4]}" if log[4] else "–±–µ–∑ username"
            first_name = log[3] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            response += (
                f"‚ö° {log[0]}\n"
                f"üë§ {first_name} ({username})\n"
                f"üìù {log[1]}\n"
                f"üïê {log[2]}\n\n"
            )

        if len(response) > 4000:
            for i in range(0, len(response), 4000):
                await message.answer(response[i:i+4000])
        else:
            await message.answer(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@dp.message(F.text == "‚ö° –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞")
@admin_required
async def promote_user_start(message: types.Message):
    user_states[message.from_user.id] = "promoting_user"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:", reply_markup=ReplyKeyboardRemove())

@dp.message(F.text == "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
@admin_required
async def ban_user_start(message: types.Message):
    user_states[message.from_user.id] = "banning_user"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=ReplyKeyboardRemove())

@dp.message(F.text == "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
@admin_required
async def unban_user_start(message: types.Message):
    user_states[message.from_user.id] = "unbanning_user"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=ReplyKeyboardRemove())

@dp.message(F.text == "‚ùå –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞")
@admin_required
async def demote_user_start(message: types.Message):
    user_states[message.from_user.id] = "demoting_user"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "promoting_user")
async def promote_user_execute(message: types.Message):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).")
        return

    target_user_id = int(message.text)
    admin_id = message.from_user.id

    try:
        cursor.execute("SELECT first_name, username FROM users WHERE user_id = ?", (target_user_id,))
        user = cursor.fetchone()

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            cursor.execute("UPDATE users SET is_admin = 1 WHERE user_id = ?", (target_user_id,))
            conn.commit()

            username = f"@{user[1]}" if user[1] else "–±–µ–∑ username"
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[0]} ({username}) –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=get_user_management_keyboard())
            await log_action(admin_id, "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(target_user_id, "üéâ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            except:
                pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    user_states[message.from_user.id] = None

@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "banning_user")
async def ban_user_execute(message: types.Message):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).")
        return

    target_user_id = int(message.text)
    admin_id = message.from_user.id

    if target_user_id == MAIN_ADMIN_ID:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        user_states[message.from_user.id] = None
        return

    try:
        cursor.execute("SELECT first_name, username FROM users WHERE user_id = ?", (target_user_id,))
        user = cursor.fetchone()

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            cursor.execute("UPDATE users SET is_banned = 1 WHERE user_id = ?", (target_user_id,))
            conn.commit()

            username = f"@{user[1]}" if user[1] else "–±–µ–∑ username"
            await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[0]} ({username}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", reply_markup=get_user_management_keyboard())
            await log_action(admin_id, "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(target_user_id, "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except:
                pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    user_states[message.from_user.id] = None

@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "unbanning_user")
async def unban_user_execute(message: types.Message):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).")
        return

    target_user_id = int(message.text)
    admin_id = message.from_user.id

    try:
        cursor.execute("SELECT first_name, username FROM users WHERE user_id = ?", (target_user_id,))
        user = cursor.fetchone()

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            cursor.execute("UPDATE users SET is_banned = 0 WHERE user_id = ?", (target_user_id,))
            conn.commit()

            username = f"@{user[1]}" if user[1] else "–±–µ–∑ username"
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[0]} ({username}) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", reply_markup=get_user_management_keyboard())
            await log_action(admin_id, "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(target_user_id, "‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            except:
                pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    user_states[message.from_user.id] = None

@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "demoting_user")
async def demote_user_execute(message: types.Message):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).")
        return

    target_user_id = int(message.text)
    admin_id = message.from_user.id

    if target_user_id == MAIN_ADMIN_ID:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        user_states[message.from_user.id] = None
        return

    try:
        cursor.execute("SELECT first_name, username FROM users WHERE user_id = ?", (target_user_id,))
        user = cursor.fetchone()

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            cursor.execute("UPDATE users SET is_admin = 0 WHERE user_id = ?", (target_user_id,))
            conn.commit()

            username = f"@{user[1]}" if user[1] else "–±–µ–∑ username"
            await message.answer(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[0]} ({username}) —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_user_management_keyboard())
            await log_action(admin_id, "–°–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {target_user_id} —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(target_user_id, "‚ùå –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã.")
            except:
                pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    user_states[message.from_user.id] = None

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
@admin_required
async def back_to_admin_panel(message: types.Message):
    await message.answer("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu_from_admin(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard(message.from_user.id))

# ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê =====
@dp.message(F.text == "üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
@access_required
async def add_product_start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = "adding_name"
    user_data[user_id] = {}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=ReplyKeyboardRemove())


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "adding_name")
async def add_product_name(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["name"] = message.text
    user_states[user_id] = "adding_quantity"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "adding_quantity")
async def add_product_quantity(message: types.Message):
    user_id = message.from_user.id
    if not message.text.isdigit():
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
        return

    user_data[user_id]["quantity"] = int(message.text)
    user_states[user_id] = "adding_category"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
                             resize_keyboard=True
                         ))


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "adding_category")
async def add_product_final(message: types.Message):
    user_id = message.from_user.id
    category = None if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text

    try:
        cursor.execute(
            "INSERT INTO products (name, quantity, category) VALUES (?, ?, ?)",
            (user_data[user_id]["name"], user_data[user_id]["quantity"], category)
        )
        conn.commit()

        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {user_data[user_id]['name']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user_data[user_id]['quantity']}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category if category else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}",
            reply_markup=get_main_keyboard(user_id)
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await log_action(user_id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", f"{user_data[user_id]['name']} (–∫–æ–ª-–≤–æ: {user_data[user_id]['quantity']})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —Ç–æ–≤–∞—Ä —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º
        if user_data[user_id]["quantity"] < 10:
            await message.answer(
                f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –¢–æ–≤–∞—Ä '{user_data[user_id]['name']}' –¥–æ–±–∞–≤–ª–µ–Ω —Å –Ω–∏–∑–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º: {user_data[user_id]['quantity']} —à—Ç.",
                reply_markup=get_main_keyboard(user_id)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!", reply_markup=get_main_keyboard(user_id))
    finally:
        user_states[user_id] = None
        user_data[user_id] = {}


# ===== –ü–û–ò–°–ö –¢–û–í–ê–†–ê (–ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ô) =====
@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞")
@access_required
async def search_product_start(message: types.Message):
    user_states[message.from_user.id] = "searching"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=ReplyKeyboardRemove())


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "searching")
async def search_product_execute(message: types.Message):
    user_id = message.from_user.id
    search_term = message.text.strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        cursor.execute("SELECT * FROM products")
        all_products = cursor.fetchall()

        if not all_products:
            await message.answer("üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç!", reply_markup=get_main_keyboard(user_id))
            user_states[user_id] = None
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        found_products = []
        for product in all_products:
            name_match = search_term.lower() in product[1].lower() if product[1] else False
            category_match = search_term.lower() in product[3].lower() if product[3] else False

            if name_match or category_match:
                found_products.append(product)

        if not found_products:
            await message.answer(f"üîé –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                                 reply_markup=get_main_keyboard(user_id))
            user_states[user_id] = None
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ('{search_term}'):\n\n"
        for product in found_products:
            response += (f"{'‚ö†Ô∏è' if product[2] < 10 else 'üîπ'} ID: {product[0]}\n"
                         f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n"
                         f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[2]}\n"
                         f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[3] if product[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n")

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(response) > 4000:
            for x in range(0, len(response), 4000):
                await message.answer(response[x:x + 4000])
        else:
            await message.answer(response, reply_markup=get_main_keyboard(user_id))

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        await log_action(user_id, "–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", f"–ó–∞–ø—Ä–æ—Å: '{search_term}', –Ω–∞–π–¥–µ–Ω–æ: {len(found_products)}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞!", reply_markup=get_main_keyboard(user_id))
    finally:
        user_states[user_id] = None


# ===== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–í–ê–†–ê =====
@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
@access_required
async def edit_product_start(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
    cursor.execute("SELECT id, name, quantity FROM products")
    products = cursor.fetchall()

    if not products:
        await message.answer("üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.", reply_markup=get_main_keyboard(message.from_user.id))
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    keyboard = []
    for product in products:
        keyboard.append([KeyboardButton(text=f"‚úèÔ∏è {product[1]} (ID: {product[0]}, –ö–æ–ª-–≤–æ: {product[2]})")])

    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(F.text.startswith("‚úèÔ∏è "))
async def edit_product_selected(message: types.Message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        product_id = int(message.text.split("(ID: ")[1].split(",")[0])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
        product = cursor.fetchone()

        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_main_keyboard(message.from_user.id))
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        user_data[message.from_user.id] = {
            "edit_id": product_id,
            "current_name": product[1],
            "current_quantity": product[2],
            "current_category": product[3]
        }

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        await message.answer(
            f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä:\n"
            f"ID: {product[0]}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[2]}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[3] if product[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üñä –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")],
                    [KeyboardButton(text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")],
                    [KeyboardButton(text="üè∑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")],
                    [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞!", reply_markup=get_main_keyboard(message.from_user.id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
@dp.message(F.text == "üñä –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")
async def edit_name_handler(message: types.Message):
    user_states[message.from_user.id] = "editing_name"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove())


@dp.message(F.text == "üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
async def edit_quantity_handler(message: types.Message):
    user_states[message.from_user.id] = "editing_quantity"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=ReplyKeyboardRemove())


@dp.message(F.text == "üè∑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def edit_category_handler(message: types.Message):
    user_states[message.from_user.id] = "editing_category"
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ '—É–¥–∞–ª–∏—Ç—å' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=ReplyKeyboardRemove()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "editing_name")
async def save_new_name(message: types.Message):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard(message.from_user.id))
    else:
        product_id = user_data[message.from_user.id]["edit_id"]
        cursor.execute("UPDATE products SET name = ? WHERE id = ?", (message.text, product_id))
        conn.commit()
        await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {message.text}", reply_markup=get_main_keyboard(message.from_user.id))
    user_states[message.from_user.id] = None


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "editing_quantity")
async def save_new_quantity(message: types.Message):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard(message.from_user.id))
    elif not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    else:
        product_id = user_data[message.from_user.id]["edit_id"]
        new_quantity = int(message.text)
        cursor.execute("UPDATE products SET quantity = ? WHERE id = ?", (new_quantity, product_id))
        conn.commit()

        response = f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_quantity}"
        if new_quantity < 10:
            product_name = user_data[message.from_user.id]["current_name"]
            response += f"\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –¢–æ–≤–∞—Ä '{product_name}' —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –Ω–∏–∑–∫–∏–π –∑–∞–ø–∞—Å: {new_quantity} —à—Ç."

        await message.answer(response, reply_markup=get_main_keyboard(message.from_user.id))
    user_states[message.from_user.id] = None


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "editing_category")
async def save_new_category(message: types.Message):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard(message.from_user.id))
    else:
        product_id = user_data[message.from_user.id]["edit_id"]
        new_category = None if message.text.lower() == "—É–¥–∞–ª–∏—Ç—å" else message.text
        cursor.execute("UPDATE products SET category = ? WHERE id = ?", (new_category, product_id))
        conn.commit()
        action = "—É–¥–∞–ª–µ–Ω–∞" if new_category is None else "–∏–∑–º–µ–Ω–µ–Ω–∞"
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {action}", reply_markup=get_main_keyboard(message.from_user.id))
    user_states[message.from_user.id] = None


# ===== –£–î–ê–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê =====
@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
@access_required
async def delete_product_start(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
    cursor.execute("SELECT id, name FROM products")
    products = cursor.fetchall()

    if not products:
        await message.answer("üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.", reply_markup=get_main_keyboard(message.from_user.id))
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    keyboard = []
    for product in products:
        keyboard.append([KeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {product[1]} (ID: {product[0]})")])

    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.message(F.text.startswith("‚ùå –£–¥–∞–ª–∏—Ç—å "))
async def delete_product_selected(message: types.Message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        product_id = int(message.text.split("(ID: ")[1].rstrip(")"))

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
        product = cursor.fetchone()

        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_main_keyboard(message.from_user.id))
            return

        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
        cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
        conn.commit()

        await message.answer(
            f"üóë –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n"
            f"ID: {product[0]}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[2]}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[3] if product[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}",
            reply_markup=get_main_keyboard(message.from_user.id)
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        await log_action(message.from_user.id, "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", f"{product[1]} (ID: {product[0]}, –∫–æ–ª-–≤–æ: {product[2]})")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!", reply_markup=get_main_keyboard(message.from_user.id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard(message.from_user.id))


# ===== –í–´–í–û–î –°–ü–ò–°–ö–ê –¢–û–í–ê–†–û–í =====
@dp.message(F.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–ª–∞–¥")
@access_required
async def show_warehouse(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = None

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        cursor.execute("SELECT * FROM products ORDER BY quantity ASC")
        products = cursor.fetchall()

        if not products:
            await message.answer("üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç!", reply_markup=get_main_keyboard(message.from_user.id))
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º (–º–µ–Ω—å—à–µ 10)
        cursor.execute("SELECT * FROM products WHERE quantity < 10 ORDER BY quantity ASC")
        low_stock = cursor.fetchall()

        response = "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        for product in products:
            response += (
                f"{'‚ö†Ô∏è' if product[2] < 10 else 'üîπ'} ID: {product[0]}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[2]}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[3] if product[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω: {product[4]}\n\n"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–∏—Ö –∑–∞–ø–∞—Å–∞—Ö
        if low_stock:
            warning = "üö® –í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
            for product in low_stock:
                warning += (
                    f"‚ñ™Ô∏è {product[1]} (ID: {product[0]}) - –æ—Å—Ç–∞–ª–æ—Å—å {product[2]} —à—Ç.\n"
                )
            response = warning + "\n" + response

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        max_length = 4000
        for i in range(0, len(response), max_length):
            await message.answer(response[i:i + max_length])

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–∫–ª–∞–¥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞!", reply_markup=get_main_keyboard(message.from_user.id))


# ===== –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ó–ê–ö–ê–ù–ß–ò–í–ê–Æ–©–ò–•–°–Ø –¢–û–í–ê–†–û–í =====
@dp.message(F.text == "üö® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏")
@access_required
async def check_low_stock(message: types.Message):
    try:
        cursor.execute("SELECT * FROM products WHERE quantity < 10 ORDER BY quantity ASC")
        low_stock = cursor.fetchall()

        if not low_stock:
            await message.answer("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ (10+ —à—Ç.)", reply_markup=get_main_keyboard(message.from_user.id))
            return

        response = "üö® –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º (<10 —à—Ç.):\n\n"
        for product in low_stock:
            response += (
                f"‚ñ™Ô∏è ID: {product[0]}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {product[2]} —à—Ç.\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[3] if product[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            )

        await message.answer(response, reply_markup=get_main_keyboard(message.from_user.id))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤!", reply_markup=get_main_keyboard(message.from_user.id))


# ===== –≠–ö–°–ü–û–†–¢ –í EXCEL (–ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ô) =====
@dp.message(F.text == "üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
@access_required
async def export_to_excel(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        cursor.execute("SELECT id, name, quantity, category, added_date FROM products")
        columns = [column[0] for column in cursor.description]
        data = cursor.fetchall()

        if not data:
            await message.answer("üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç! –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", reply_markup=get_main_keyboard(message.from_user.id))
            return

        # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        output = BytesIO()

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É Excel
        workbook = Workbook()
        sheet = workbook.active
        sheet.title = "–°–∫–ª–∞–¥"

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        sheet.append(columns)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row in data:
            sheet.append(row)
            if row[2] < 10:  # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ < 10
                # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                pass

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        workbook.save(output)
        output.seek(0)  # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–≤–æ–¥–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        file_data = output.getvalue()
        filename = f"—Å–∫–ª–∞–¥_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.xlsx"

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
        excel_file = BufferedInputFile(
            file=file_data,
            filename=filename
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer_document(
            document=excel_file,
            caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞ –≤ Excel",
            reply_markup=get_main_keyboard(message.from_user.id)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö!\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
    finally:
        # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
        if 'output' in locals():
            output.close()


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ì–†–£–ü–ü –ò –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –ö–û–ú–ê–ù–î =====

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥—Ä—É–ø–ø (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
@dp.message(F.chat.type.in_({"group", "supergroup"}))
async def handle_group_messages(message: types.Message):
    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
@dp.message(F.chat.type == "private")
@access_required
async def unknown_command(message: types.Message):
    user_id = message.from_user.id
    await message.answer(
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard(user_id)
    )
    await log_action(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", f"–í–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç: {message.text}")

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='products'")
    table_exists = cursor.fetchone()
    logger.info(f"–¢–∞–±–ª–∏—Ü–∞ 'products' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {bool(table_exists)}")

    cursor.execute("SELECT COUNT(*) FROM products")
    count = cursor.fetchone()[0]
    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {count}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    cursor.execute("SELECT COUNT(*) FROM products WHERE quantity < 10")
    low_stock_count = cursor.fetchone()[0]
    if low_stock_count > 0:
        logger.warning(f"–í–Ω–∏–º–∞–Ω–∏–µ! –í –±–∞–∑–µ {low_stock_count} —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º (<10 —à—Ç.)")

    logger.info("ü§ñ –°–∫–ª–∞–¥—Å–∫–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("üõë EcoSystemSoraBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()
        logger.info("üì¶ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")