import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
import sqlite3
import asyncio
import os
from pathlib import Path
import pandas as pd
from datetime import datetime
from io import BytesIO
from openpyxl import Workbook
from aiogram.types import BufferedInputFile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="8143304952:AAHm-ha-Cb2vqOHeOyWGO1B4sdS6wbzBiBQ")
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_data = {}

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• =====
BASE_DIR = Path(__file__).parent
DB_PATH = BASE_DIR / "warehouse.db"  # –¢–µ–ø–µ—Ä—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
EXPORT_DIR = BASE_DIR / "exports"  # –ü–∞–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
EXPORT_DIR.mkdir(exist_ok=True)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
cursor.execute('''
               CREATE TABLE IF NOT EXISTS products
               (
                   id
                   INTEGER
                   PRIMARY
                   KEY
                   AUTOINCREMENT,
                   name
                   TEXT
                   NOT
                   NULL,
                   quantity
                   INTEGER
                   DEFAULT
                   1,
                   category
                   TEXT,
                   added_date
                   TIMESTAMP
                   DEFAULT
                   CURRENT_TIMESTAMP
               )
               ''')
conn.commit()


# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")],
            [KeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–ª–∞–¥"), KeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞")],
            [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
            [KeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")]
        ],
        resize_keyboard=True
    )


# ===== –ö–û–ú–ê–ù–î–ê /start =====
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = None
    user_data[user_id] = {}
    await message.answer(
        "üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫–ª–∞–¥—Å–∫–æ–π –±–æ—Ç!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard()
    )


# ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê =====
@dp.message(F.text == "üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product_start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = "adding_name"
    user_data[user_id] = {}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "adding_name")
async def add_product_name(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["name"] = message.text
    user_states[user_id] = "adding_quantity"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "adding_quantity")
async def add_product_quantity(message: types.Message):
    user_id = message.from_user.id
    if not message.text.isdigit():
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
        return

    user_data[user_id]["quantity"] = int(message.text)
    user_states[user_id] = "adding_category"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
                             resize_keyboard=True
                         ))


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "adding_category")
async def add_product_final(message: types.Message):
    user_id = message.from_user.id
    category = None if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text

    try:
        cursor.execute(
            "INSERT INTO products (name, quantity, category) VALUES (?, ?, ?)",
            (user_data[user_id]["name"], user_data[user_id]["quantity"], category)
        )
        conn.commit()

        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {user_data[user_id]['name']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user_data[user_id]['quantity']}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category if category else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!", reply_markup=get_main_keyboard())
    finally:
        user_states[user_id] = None
        user_data[user_id] = {}


# ===== –ü–û–ò–°–ö –¢–û–í–ê–†–ê =====
@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞")
async def search_product_start(message: types.Message):
    user_states[message.from_user.id] = "searching"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:")


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "searching")
async def search_product_execute(message: types.Message):
    user_id = message.from_user.id
    search_term = f"%{message.text}%"

    try:
        cursor.execute(
            "SELECT * FROM products WHERE name LIKE ? OR category LIKE ?",
            (search_term, search_term)
        )
        products = cursor.fetchall()

        if not products:
            await message.answer("üîé –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=get_main_keyboard())
            user_states[user_id] = None
            return

        response = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
        for product in products:
            response += (f"üîπ ID: {product[0]}\n"
                         f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n"
                         f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[2]}\n"
                         f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[3] if product[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n")

        await message.answer(response, reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞!", reply_markup=get_main_keyboard())
    finally:
        user_states[user_id] = None


# ===== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–í–ê–†–ê =====
@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def edit_product_start(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
    cursor.execute("SELECT id, name, quantity FROM products")
    products = cursor.fetchall()

    if not products:
        await message.answer("üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.", reply_markup=get_main_keyboard())
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    keyboard = []
    for product in products:
        keyboard.append([KeyboardButton(text=f"‚úèÔ∏è {product[1]} (ID: {product[0]}, –ö–æ–ª-–≤–æ: {product[2]})")])

    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(F.text.startswith("‚úèÔ∏è "))
async def edit_product_selected(message: types.Message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        product_id = int(message.text.split("(ID: ")[1].split(",")[0])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
        product = cursor.fetchone()

        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_main_keyboard())
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        user_data[message.from_user.id] = {
            "edit_id": product_id,
            "current_name": product[1],
            "current_quantity": product[2],
            "current_category": product[3]
        }

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        await message.answer(
            f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä:\n"
            f"ID: {product[0]}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[2]}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[3] if product[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üñä –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")],
                    [KeyboardButton(text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")],
                    [KeyboardButton(text="üè∑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")],
                    [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞!", reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
@dp.message(F.text == "üñä –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")
async def edit_name_handler(message: types.Message):
    user_states[message.from_user.id] = "editing_name"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))


@dp.message(F.text == "üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
async def edit_quantity_handler(message: types.Message):
    user_states[message.from_user.id] = "editing_quantity"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))


@dp.message(F.text == "üè∑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def edit_category_handler(message: types.Message):
    user_states[message.from_user.id] = "editing_category"
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ '—É–¥–∞–ª–∏—Ç—å' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "editing_name")
async def save_new_name(message: types.Message):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
    else:
        product_id = user_data[message.from_user.id]["edit_id"]
        cursor.execute("UPDATE products SET name = ? WHERE id = ?", (message.text, product_id))
        conn.commit()
        await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {message.text}", reply_markup=get_main_keyboard())
    user_states[message.from_user.id] = None


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "editing_quantity")
async def save_new_quantity(message: types.Message):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
    elif not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    else:
        product_id = user_data[message.from_user.id]["edit_id"]
        cursor.execute("UPDATE products SET quantity = ? WHERE id = ?", (int(message.text), product_id))
        conn.commit()
        await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {message.text}", reply_markup=get_main_keyboard())
    user_states[message.from_user.id] = None


@dp.message(F.text, lambda message: user_states.get(message.from_user.id) == "editing_category")
async def save_new_category(message: types.Message):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
    else:
        product_id = user_data[message.from_user.id]["edit_id"]
        new_category = None if message.text.lower() == "—É–¥–∞–ª–∏—Ç—å" else message.text
        cursor.execute("UPDATE products SET category = ? WHERE id = ?", (new_category, product_id))
        conn.commit()
        action = "—É–¥–∞–ª–µ–Ω–∞" if new_category is None else "–∏–∑–º–µ–Ω–µ–Ω–∞"
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {action}", reply_markup=get_main_keyboard())
    user_states[message.from_user.id] = None


# ===== –£–î–ê–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê =====
@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def delete_product_start(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
    cursor.execute("SELECT id, name FROM products")
    products = cursor.fetchall()

    if not products:
        await message.answer("üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.", reply_markup=get_main_keyboard())
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    keyboard = []
    for product in products:
        keyboard.append([KeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {product[1]} (ID: {product[0]})")])

    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.message(F.text.startswith("‚ùå –£–¥–∞–ª–∏—Ç—å "))
async def delete_product_selected(message: types.Message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        product_id = int(message.text.split("(ID: ")[1].rstrip(")"))

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
        product = cursor.fetchone()

        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_main_keyboard())
            return

        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
        cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
        conn.commit()

        await message.answer(
            f"üóë –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n"
            f"ID: {product[0]}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[2]}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[3] if product[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}",
            reply_markup=get_main_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!", reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())


# ===== –í–´–í–û–î –°–ü–ò–°–ö–ê –¢–û–í–ê–†–û–í =====
@dp.message(F.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–ª–∞–¥")
async def show_warehouse(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = None

    try:
        cursor.execute("SELECT * FROM products")
        products = cursor.fetchall()

        if not products:
            await message.answer("üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç!", reply_markup=get_main_keyboard())
            return

        response = "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        for product in products:
            response += (
                f"üîπ ID: {product[0]}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[2]}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[3] if product[3] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω: {product[4]}\n\n"
            )

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        max_length = 4000
        for i in range(0, len(response), max_length):
            await message.answer(response[i:i + max_length])

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–∫–ª–∞–¥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞!", reply_markup=get_main_keyboard())


# ===== –≠–ö–°–ü–û–†–¢ –í EXCEL =====
@dp.message(F.text == "üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
async def export_to_excel(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        cursor.execute("SELECT id, name, quantity, category, added_date FROM products")
        columns = [column[0] for column in cursor.description]
        data = cursor.fetchall()

        if not data:
            await message.answer("üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç! –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", reply_markup=get_main_keyboard())
            return

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        output = BytesIO()

        # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª
        workbook = Workbook()
        sheet = workbook.active
        sheet.title = "–°–∫–ª–∞–¥"

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        sheet.append(columns)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row in data:
            sheet.append(row)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        workbook.save(output)
        output.seek(0)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"—Å–∫–ª–∞–¥_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.xlsx"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_document(
            document=types.BufferedInputFile(output.read(), filename=filename),
            caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞ –≤ Excel"
        )

        await message.answer("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!", reply_markup=get_main_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö!\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_keyboard()
        )


# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='products'")
    table_exists = cursor.fetchone()
    logger.info(f"–¢–∞–±–ª–∏—Ü–∞ 'products' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {bool(table_exists)}")

    cursor.execute("SELECT COUNT(*) FROM products")
    count = cursor.fetchone()[0]
    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {count}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")


if __name__ == "__main__":
    asyncio.run(main())